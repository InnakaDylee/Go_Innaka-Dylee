

-- 1 --
CREATE DATABASE alta_online_shop;

USE alta_online_shop;

-- 2 --
CREATE TABLE users (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	fullname VARCHAR(255) NOT NULL,
	address VARCHAR(255) NOT NULL,
	birthDate DATE,
	userStatus ENUM('Active', 'Deactive'),
	gender ENUM('Female', 'Male'),
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	update_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE products (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	typeID INT NOT NULL,
	operatorID INT NOT NULL,
	code INT(50) NOT NULL,
	name VARCHAR(255) NOT NULL,
	status SMALLINT,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE productTypes (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE productDesc (
	id INT PRIMARY KEY,
	description TEXT NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE operators (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	fullname VARCHAR(255) NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE transactions (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	userId INT NOT NULL,
	paymentMethodId INT NOT NULL,
	status ENUM('Success', 'Pending', 'Cancelled'),
	totalQuantity INT NOT NULL,
	totalPrice DECIMAL(25,2),
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE transactionDetails (
	transactionID INT NOT NULL,
	productID INT NOT NULL,
	status ENUM('Success', 'Pending', 'Cancelled'),
	quantity INT NOT NULL,
	price INT NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE paymentMethods (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	status SMALLINT,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

ALTER TABLE transactions ADD FOREIGN KEY (userId) REFERENCES users(id) ON DELETE CASCADE;
ALTER TABLE transactions ADD FOREIGN KEY (paymentMethodId) REFERENCES paymentMethods(id) ON DELETE CASCADE;
ALTER TABLE transactionDetails ADD FOREIGN KEY (transactionID) REFERENCES transactions(id) ON DELETE CASCADE;
ALTER TABLE transactionDetails ADD FOREIGN KEY (productID) REFERENCES products(id) ON DELETE CASCADE;
ALTER TABLE productDesc ADD FOREIGN KEY (id) REFERENCES products(id) ON DELETE CASCADE;
ALTER TABLE products ADD FOREIGN KEY (typeID) REFERENCES productTypes(id) ON DELETE CASCADE;
ALTER TABLE products ADD FOREIGN KEY (operatorID) REFERENCES operators(id) ON DELETE CASCADE;

-- 3 --
CREATE TABLE courir (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	name VARCHAR(255) NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- 4 --
ALTER TABLE courir ADD ongkosDasar INT;

-- 5 --
ALTER TABLE courir RENAME shipping;

-- 6 --
DROP TABLE shipping;

--7.A
CREATE TABLE paymentMethodDesc (
	paymentMethodID INT NOT NULL UNIQUE,
	description VARCHAR(255) NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (paymentMethodID) REFERENCES paymentMethods(id)
);

--7.B
CREATE TABLE address (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	userID INT NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (userID) REFERENCES users(id)
);

-- 7.C
CREATE TABLE userPaymentMethodDetail (
	id INT PRIMARY KEY UNIQUE AUTO_INCREMENT,
	userID INT NOT NULL,
	paymentMethodID INT NOT NULL,
	createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	updateAt DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
	FOREIGN KEY (userID) REFERENCES users(id),
	FOREIGN KEY (paymentMethodID) REFERENCES paymentMethods(id)
);